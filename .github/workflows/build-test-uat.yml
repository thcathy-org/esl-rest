name: Build and deploy to UAT

on:
  push:
    branches: [ "master" ]
  schedule:
    - cron: '30 4 * * 6'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  checks: write
  pull-requests: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: test
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: check assemble
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: 'build/test-results/test/*.xml'
    - name: Archive Production Artifact
      uses: actions/upload-artifact@master
      with:
        name: build
        path: build

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref == 'refs/heads/master'
    outputs:
      docker_image_tag: ${{ steps.set-tag.outputs.docker_image_tag }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
    - uses: actions/download-artifact@master
      with:
        name: build
        path: build
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Set Release version env variable
      run: |
        echo "RELEASE_VERSION=$(./gradlew properties -q | grep 'version:' | awk '{print $2}')" >> $GITHUB_ENV
    - name: Set docker image tag env variable
      id: set-tag
      run: |
        TAG="${{ env.RELEASE_VERSION }}-${{ github.run_number }}"
        echo "DOCKER_IMAGE_TAG=$TAG" >> $GITHUB_ENV
        echo "docker_image_tag=$TAG" >> $GITHUB_OUTPUT
    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - uses: docker/build-push-action@v3
      with:
        push: true
        context: .
        file: docker/Dockerfile
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/esl-rest:latest,${{ secrets.DOCKERHUB_USERNAME }}/esl-rest:${{ env.DOCKER_IMAGE_TAG }}

  deploy-uat-docker-swarm:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v3
    - name: Deploy to traditional UAT
      uses: dawidd6/action-ansible-playbook@v2
      with:    
        playbook: ansible/deploy.yml
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        vault_password: ${{ secrets.VAULT_PASSWORD }}
        options: |
          --inventory ansible/inventory_uat
          --limit uat          
          -e docker_image_tag=${{ needs.docker-build.outputs.docker_image_tag }}
          -e image_generation_server_host=${{ secrets.IMAGE_GENERATION_SERVER_HOST }}
          -e image_generation_server_apikey=${{ secrets.IMAGE_GENERATION_SERVER_APIKEY }}
          -e replicate_api_token=${{ secrets.REPLICATE_API_TOKEN }}

  deploy-uat-k8s:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v3
    - name: Deploy to k8s UAT
      uses: dawidd6/action-ansible-playbook@v2
      with:    
        playbook: ansible/deploy-k8s.yml
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        vault_password: ${{ secrets.VAULT_PASSWORD }}
        options: |
          --inventory ansible/inventory_k8s-uat
          -e docker_image_tag=${{ needs.docker-build.outputs.docker_image_tag }}
          -e image_generation_server_host=${{ secrets.IMAGE_GENERATION_SERVER_HOST }}
          -e image_generation_server_apikey=${{ secrets.IMAGE_GENERATION_SERVER_APIKEY }}
          -e replicate_api_token=${{ secrets.REPLICATE_API_TOKEN }}
