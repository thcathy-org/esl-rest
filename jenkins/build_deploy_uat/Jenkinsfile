pipeline {
  agent {
    docker {
      args '-v $HOME/.gradle:$HOME/.gradle'
      image 'cimg/openjdk:11.0'
    }
  }
  triggers { cron('30 4 * * 6') }

  environment {
    APISERVER_HOST = credentials('apiserver_host')
  }

  stages {
    stage('get version in build.gradle') {
        steps {
            script {
                env.version = sh (
                    script: "./gradlew properties -q | grep \"version:\" | awk '{print \$2}'",
                    returnStdout: true
                ).trim()
                sh "echo Building project in version: $version"
            }
        }
    }
    stage('build and test') {
      environment {
        SPRING_PROFILES_ACTIVE = 'test'
      }
      steps {
        script {
            sh 'chmod +x gradlew'
            sh './gradlew clean dependencies check assemble'
        }
      }
      post {
        always { junit 'build/test-results/test/*.xml' }
      }
    }

    stage("docker build") {
      when {
        branch 'master'
        not { triggeredBy 'TimerTrigger' }
      }
      environment {
        DOCKER_LOGIN = credentials('DOCKER_LOGIN')
        docker_image_tag = "${version}-${env.BUILD_NUMBER}"
      }
      steps {
        sh "docker build -t thcathy/esl-rest:latest -t thcathy/esl-rest:${docker_image_tag} -f docker/Dockerfile ."
        sh "docker login -u $DOCKER_LOGIN_USR -p $DOCKER_LOGIN_PSW"
        sh "docker push thcathy/esl-rest:latest"
        sh "docker push thcathy/esl-rest:${docker_image_tag}"
      }
    }

    stage("deploy and verify UAT") {
      when {
        branch 'master'
        not { triggeredBy 'TimerTrigger' }
      }
      environment {
        DEPLOY_USER = 'thcathy'
        docker_image_tag = "${version}-${env.BUILD_NUMBER}"
      }
      agent {
        docker {
          image 'ansible/ansible-runner'
        }
      }
      steps {
        ansiblePlaybook(
          inventory: 'ansible/inventory_uat',
          limit: 'uat',
          extras: "-e docker_image_tag=${docker_image_tag} -e apiserver_host=${APISERVER_HOST}",
          playbook: 'ansible/deploy.yml',
          credentialsId: 'Jenkins-master',
          vaultCredentialsId: 'ansible_vault_id',
        )
      }
    }
  }

}
